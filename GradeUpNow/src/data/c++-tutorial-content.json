{
  "title": "Complete C++ Programming Course",
  "description": "Master C++ programming from basics to advanced concepts with hands-on examples and practical projects.",
  "sections": [
    {
      "id": "introduction",
      "title": "Introduction to C++",
      "description": "Learn the basics of C++ programming language",
      "content": [
        {
          "title": "History of C++",
          "type": "text",
          "content": "C++ was developed by Bjarne Stroustrup in 1979 at Bell Labs as an extension of C. It supports both procedural and object-oriented programming, making it one of the most widely used languages for system software, game development, and high-performance applications.",
          "code": null
        },
        {
          "title": "Your First C++ Program",
          "type": "code",
          "content": "Let's start with the classic 'Hello, World!' program in C++.",
          "code": "#include <iostream>\nusing namespace std;\n\nint main() {\n    cout << \"Hello, World!\" << endl;\n    return 0;\n}\n\n/* Output: Hello, World! */"
        },
        {
          "title": "C++ Program Structure",
          "type": "text",
          "content": "Every C++ program has a main() function, which is the entry point. #include imports header files. The iostream library provides input/output features using cout and cin. The return 0 indicates successful execution.",
          "code": null
        }
      ]
    },
    {
      "id": "basics",
      "title": "C++ Language Basics",
      "description": "Variables, data types, and basic operations",
      "content": [
        {
          "title": "Variables and Data Types",
          "type": "code",
          "content": "C++ supports various built-in data types.",
          "code": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int age = 25;\n    float height = 5.9;\n    char grade = 'A';\n    double pi = 3.14159;\n    bool isStudent = true;\n\n    cout << \"Age: \" << age << endl;\n    cout << \"Height: \" << height << endl;\n    cout << \"Grade: \" << grade << endl;\n    cout << \"Pi: \" << pi << endl;\n    cout << \"Is Student? \" << isStudent << endl;\n    return 0;\n}"
        },
        {
          "title": "Constants",
          "type": "code",
          "content": "Use const or #define for constants in C++.",
          "code": "#include <iostream>\nusing namespace std;\n\n#define PI 3.14159\n\nint main() {\n    const int MAX = 100;\n    cout << \"PI: \" << PI << endl;\n    cout << \"MAX: \" << MAX << endl;\n    return 0;\n}"
        },
        {
          "title": "Input and Output",
          "type": "code",
          "content": "Use cin for input and cout for output.",
          "code": "#include <iostream>\nusing namespace std;\n\nint main() {\n    string name;\n    int number;\n    \n    cout << \"Enter your name: \";\n    cin >> name;\n    \n    cout << \"Enter a number: \";\n    cin >> number;\n    \n    cout << \"Hello \" << name << \"! Your number is \" << number << endl;\n    return 0;\n}"
        }
      ]
    },
    {
      "id": "control-structures",
      "title": "Control Structures",
      "description": "Decision making and loops in C++",
      "content": [
        {
          "title": "If-Else Statements",
          "type": "code",
          "content": "Decision making with if-else.",
          "code": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int score;\n    cout << \"Enter score: \";\n    cin >> score;\n\n    if (score >= 90) cout << \"Grade A\";\n    else if (score >= 75) cout << \"Grade B\";\n    else if (score >= 50) cout << \"Grade C\";\n    else cout << \"Fail\";\n    return 0;\n}"
        },
        {
          "title": "Switch Statement",
          "type": "code",
          "content": "Efficient multiple-choice decisions.",
          "code": "#include <iostream>\nusing namespace std;\n\nint main() {\n    int day;\n    cout << \"Enter day (1-7): \";\n    cin >> day;\n\n    switch(day) {\n        case 1: cout << \"Monday\"; break;\n        case 2: cout << \"Tuesday\"; break;\n        default: cout << \"Invalid day\";\n    }\n    return 0;\n}"
        },
        {
          "title": "Loops",
          "type": "code",
          "content": "For, while, and do-while loops.",
          "code": "#include <iostream>\nusing namespace std;\n\nint main() {\n    // For loop\n    for(int i=1; i<=5; i++) cout << i << \" \";\n\n    // While loop\n    int j=1;\n    while(j<=3) { cout << \"\\nWhile: \" << j; j++; }\n\n    // Do-while loop\n    int k=1;\n    do { cout << \"\\nDo-While: \" << k; k++; } while(k<=2);\n\n    return 0;\n}"
        }
      ]
    },
    {
      "id": "functions",
      "title": "Functions",
      "description": "Organizing reusable code blocks",
      "content": [
        {
          "title": "Function Basics",
          "type": "code",
          "content": "Defining and calling functions.",
          "code": "#include <iostream>\nusing namespace std;\n\nint add(int a, int b) { return a + b; }\n\nvoid greet(string name) { cout << \"Hello, \" << name << endl; }\n\nint main() {\n    cout << \"Sum: \" << add(5, 3) << endl;\n    greet(\"Alice\");\n    return 0;\n}"
        },
        {
          "title": "Function Overloading",
          "type": "code",
          "content": "Multiple functions with same name but different parameters.",
          "code": "#include <iostream>\nusing namespace std;\n\nint add(int a, int b) { return a+b; }\ndouble add(double a, double b) { return a+b; }\n\nint main() {\n    cout << add(3,4) << endl;\n    cout << add(2.5, 3.7) << endl;\n    return 0;\n}"
        },
        {
          "title": "Recursion",
          "type": "code",
          "content": "Recursive factorial function.",
          "code": "#include <iostream>\nusing namespace std;\n\nint factorial(int n) {\n    if(n<=1) return 1;\n    return n * factorial(n-1);\n}\n\nint main() {\n    cout << \"Factorial of 5: \" << factorial(5) << endl;\n    return 0;\n}"
        }
      ]
    },
    {
      "id": "oop",
      "title": "Object-Oriented Programming",
      "description": "Classes, objects, and OOP concepts",
      "content": [
        {
          "title": "Classes and Objects",
          "type": "code",
          "content": "Defining and using classes.",
          "code": "#include <iostream>\nusing namespace std;\n\nclass Student {\npublic:\n    string name;\n    int age;\n    void display() { cout << name << \" (\" << age << \")\" << endl; }\n};\n\nint main() {\n    Student s1;\n    s1.name = \"Alice\";\n    s1.age = 20;\n    s1.display();\n    return 0;\n}"
        },
        {
          "title": "Constructors and Destructors",
          "type": "code",
          "content": "Special functions for initialization and cleanup.",
          "code": "#include <iostream>\nusing namespace std;\n\nclass Car {\npublic:\n    Car() { cout << \"Car created\\n\"; }\n    ~Car() { cout << \"Car destroyed\\n\"; }\n};\n\nint main() {\n    Car c;\n    return 0;\n}"
        },
        {
          "title": "Inheritance",
          "type": "code",
          "content": "Deriving new classes from existing ones.",
          "code": "#include <iostream>\nusing namespace std;\n\nclass Animal {\npublic:\n    void speak() { cout << \"Animal sound\\n\"; }\n};\n\nclass Dog : public Animal {\npublic:\n    void speak() { cout << \"Woof!\\n\"; }\n};\n\nint main() {\n    Dog d;\n    d.speak();\n    return 0;\n}"
        },
        {
          "title": "Polymorphism",
          "type": "code",
          "content": "Virtual functions for runtime polymorphism.",
          "code": "#include <iostream>\nusing namespace std;\n\nclass Shape {\npublic:\n    virtual void draw() { cout << \"Drawing Shape\\n\"; }\n};\n\nclass Circle : public Shape {\npublic:\n    void draw() override { cout << \"Drawing Circle\\n\"; }\n};\n\nint main() {\n    Shape* s = new Circle();\n    s->draw();\n    delete s;\n    return 0;\n}"
        }
      ]
    },
    {
      "id": "advanced",
      "title": "Advanced Topics",
      "description": "Templates, STL, exceptions, and more",
      "content": [
        {
          "title": "Templates",
          "type": "code",
          "content": "Generic programming with templates.",
          "code": "#include <iostream>\nusing namespace std;\n\ntemplate <typename T>\nT add(T a, T b) { return a+b; }\n\nint main() {\n    cout << add(3,4) << endl;\n    cout << add(2.5,3.7) << endl;\n    return 0;\n}"
        },
        {
          "title": "STL - Vectors",
          "type": "code",
          "content": "Using the Standard Template Library.",
          "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint main() {\n    vector<int> v = {1,2,3};\n    v.push_back(4);\n    for(int x : v) cout << x << \" \";\n    return 0;\n}"
        },
        {
          "title": "Exception Handling",
          "type": "code",
          "content": "Handling runtime errors with try-catch.",
          "code": "#include <iostream>\nusing namespace std;\n\nint main() {\n    try {\n        int x=0;\n        if(x==0) throw runtime_error(\"Division by zero!\");\n        cout << 10/x;\n    } catch(exception &e) {\n        cout << \"Error: \" << e.what();\n    }\n    return 0;\n}"
        }
      ]
    }
  ]
}
